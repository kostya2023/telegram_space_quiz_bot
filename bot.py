from utils import database
from dotenv import load_dotenv
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import os
import time
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="[%(levelname)s](%(asctime)s) - %(message)s",
    datefmt="%Y.%m.%d %H:%M:%S",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_API")
ADMIN_IDS = [int(id.strip()) for id in os.getenv("ADMIN", "").split(",") if id.strip()]
bot = telebot.TeleBot(BOT_TOKEN)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
admin_state = {}

def log_action(action: str, user_id: int, details: str = ""):
    logging.info(f"ACTION: {action} | USER_ID: {user_id} | DETAILS: {details}")

def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

# ------------ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ------------
@bot.message_handler(commands=["start"])
def send_welcome(message):
    log_action("start", message.from_user.id)
    text = (
        "üöÄ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑-–±–æ—Ç!*\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–π –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ. "
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∫–≤–∏–∑, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –¥–∞–∂–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑!\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    )
    bot.send_message(message.chat.id, text, parse_mode="Markdown")

@bot.message_handler(commands=["help"])
def show_help(message):
    log_action("help", message.from_user.id)
    text = (
        "üìã *–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:*\n\n"
        "‚ñ∂Ô∏è /start\_quiz - –ù–∞—á–∞—Ç—å –∫–≤–∏–∑\n"
        "üìä /stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "üéÅ /get\_prize - –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑\n"
        "üë®‚Äçüíª /author - –û–± –∞–≤—Ç–æ—Ä–µ\n"
    )
    if is_admin(message.from_user.id):
        text += "üîß /admin - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n"
    bot.send_message(message.chat.id, text, parse_mode="Markdown")

@bot.message_handler(commands=["get_prize"])
def prize(message):
    user_id = message.from_user.id
    completed = database.get_completed_questions(user_id)
    total_questions = len(database.get_all_questions())
    
    if len(completed) == total_questions and total_questions > 0:
        text = (
            "üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ–º –∫–≤–∏–∑–∞!*\n\n"
            "–ü–æ–∫–∞ —á—Ç–æ —è –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª, –∫–∞–∫–∏–µ –ø–æ–¥–∞—Ä–∫–∏ –±—É–¥—É—Ç, "
            "—Ç–∞–∫ —á—Ç–æ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —Å–≤–æ–µ–π –ø–æ–±–µ–¥–æ–π! üèÜ\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –≤—ã–π—Ç–∏ –≤ —Ç–æ–ø! üöÄ"
        )
        bot.send_message(message.chat.id, text, parse_mode="Markdown")
    else:
        bot.send_message(
            message.chat.id,
            f"‚ùå –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã!\n"
            f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {len(completed)}/{total_questions}",
            parse_mode="Markdown"
        )

@bot.message_handler(commands=["start_quiz"])
def start_quiz(message):
    user_id = message.from_user.id
    log_action("start_quiz", user_id)
    
    database.delete_user_progress(user_id)
    database.add_user(user_id, message.from_user.username)
    
    question = database.get_question(1)
    if not question:
        bot.send_message(message.chat.id, "‚ùå –í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return

    keyboard = InlineKeyboardMarkup()
    for idx, option in enumerate(question["options"]):
        keyboard.add(InlineKeyboardButton(option, callback_data=f"answer_1_{idx + 1}"))
    
    database.add_user_progress(user_id, 1, start_time=int(time.time()))
    bot.send_message(message.chat.id, question["question_text"], reply_markup=keyboard)

@bot.message_handler(commands=["author"])
def author(message):
    authors_text = (
        "üë®‚Äçüíª *–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:*\n\n"
        "*–§–ò*: –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –ì–æ—Ä—à–∫–æ–≤\n"
        "*Telegram*: @Kos000113\n"
        "*–ü–æ—á—Ç–∞*: kostya\_gorshkov\_06@vk\.com\n"
        "*GitHub*: [kostya2023](https://github\.com/kostya2023)\n\n"
        "üåê *–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø—Ä–æ–µ–∫—Ç–∞:*\n"
        "[telegram\_space\_quiz\_bot](https://github\.com/kostya2023/telegram\_space\_quiz\_bot)"
    )
    
    bot.send_message(
        message.chat.id,
        authors_text,
        parse_mode="MarkdownV2",
        disable_web_page_preview=True
    )

@bot.message_handler(commands=["stats"])
def show_stats(message):
    user_id = message.from_user.id
    stats = database.get_my_info(user_id)
    completed = database.get_completed_questions(user_id)
    
    text = (
        f"üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n"
        f"‚Ä¢ –ü—Ä–æ–π–¥–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(completed)}\n"
        f"‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è: {stats['total_time']} —Å–µ–∫\n"
        f"‚Ä¢ –ú–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ: {stats['place'] if stats['place'] != '–ù–µ –≤ —Ç–æ–ø–µ' else 'üö´'}"
    )
    bot.send_message(message.chat.id, text, parse_mode="Markdown")

# ------------ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ------------
def generate_admin_menu():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞–º–∏", callback_data="admin_questions"),
        InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
        InlineKeyboardButton("üìä –¢–æ–ø-10", callback_data="admin_stats"),
        InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="admin_close")
    )
    return keyboard

@bot.message_handler(commands=["admin"])
def admin_panel(message):
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return

    log_action("admin", message.from_user.id)
    bot.send_message(
        message.chat.id,
        "üîß *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*",
        parse_mode="Markdown",
        reply_markup=generate_admin_menu()
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("admin_"))
def handle_admin_actions(call):
    user_id = call.from_user.id
    if not is_admin(user_id):
        bot.answer_callback_query(call.id, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return

    action = call.data.split("_")[1]
    
    if action == "questions":
        questions = database.get_all_questions()
        keyboard = InlineKeyboardMarkup()
        for q in questions:
            keyboard.add(InlineKeyboardButton(
                f"‚ùå –í–æ–ø—Ä–æ—Å {q['question_id']}: {q['question_text'][:20]}...",
                callback_data=f"delete_question_{q['question_id']}"
            ))
        keyboard.add(
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="add_question"),
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")
        )
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="üìö –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤:",
            reply_markup=keyboard
        )
    
    elif action == "users":
        users = database.get_all_users()
        keyboard = InlineKeyboardMarkup()
        for user in users:
            keyboard.add(InlineKeyboardButton(
                f"üë§ {user['username']} (ID: {user['tg_id']})",
                callback_data=f"user_detail_{user['tg_id']}"
            ))
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back"))
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
            reply_markup=keyboard
        )
    
    elif action == "stats":
        top = database.get_top()
        text = "üèÜ *–¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n\n"
        for place, data in top.items():
            text += f"{place}. {data['Name_user']} ‚Äî {data['total_time']} —Å–µ–∫\n"
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back"))
        )
    
    elif action == "back":
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
            reply_markup=generate_admin_menu()
        )
    
    elif action == "close":
        bot.delete_message(call.message.chat.id, call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_question_"))
def delete_question(call):
    question_id = int(call.data.split("_")[2])
    if database.delete_question(question_id):
        bot.answer_callback_query(call.id, "‚úÖ –í–æ–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω!")
        handle_admin_actions(call)
    else:
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞!")

@bot.callback_query_handler(func=lambda call: call.data == "add_question")
def ask_new_question(call):
    admin_state[call.from_user.id] = "waiting_question"
    bot.send_message(
        call.message.chat.id,
        "üìù –í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "¬´–í–æ–ø—Ä–æ—Å; –≤–∞—Ä–∏–∞–Ω—Ç1; –≤–∞—Ä–∏–∞–Ω—Ç2; –≤–∞—Ä–∏–∞–Ω—Ç3; –≤–∞—Ä–∏–∞–Ω—Ç4; –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π_–æ—Ç–≤–µ—Ç¬ª\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "¬´–°–∫–æ–ª—å–∫–æ –ø–ª–∞–Ω–µ—Ç –≤ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ?; 8; 9; 10; 7; 1¬ª"
    )

@bot.message_handler(func=lambda m: admin_state.get(m.from_user.id) == "waiting_question")
def add_new_question(message):
    try:
        data = message.text.split(";")
        if len(data) != 6:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
        
        database.add_question(
            data[0].strip(),
            data[1].strip(),
            data[2].strip(),
            data[3].strip(),
            data[4].strip(),
            int(data[5].strip())
        )
        bot.send_message(message.chat.id, "‚úÖ –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω!")
        admin_state[message.from_user.id] = None
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

# ------------ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ ------------
@bot.callback_query_handler(func=lambda call: call.data.startswith("answer_"))
def handle_answer(call):
    user_id = call.from_user.id
    _, current_q_id, selected_opt = call.data.split("_")
    current_q_id = int(current_q_id)
    selected_opt = int(selected_opt)

    is_correct = database.check_answer(current_q_id, selected_opt)

    if is_correct:
        database.complete_question(user_id, current_q_id)
        bot.answer_callback_query(call.id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
        next_q = database.get_question(current_q_id + 1)
        
        if next_q:
            keyboard = InlineKeyboardMarkup()
            for idx, opt in enumerate(next_q["options"]):
                keyboard.add(InlineKeyboardButton(opt, callback_data=f"answer_{current_q_id + 1}_{idx + 1}"))
            
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=next_q["question_text"],
                reply_markup=keyboard
            )
            database.add_user_progress(user_id, current_q_id + 1, start_time=int(time.time()))
        else:
            database.add_to_top(user_id, call.from_user.username)
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="üéâ –ö–≤–∏–∑ –ø—Ä–æ–π–¥–µ–Ω! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–æ–ø!"
            )
    else:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

if __name__ == "__main__":
    database.create_tables()
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()