import json
import os
import time
import logging
import re
from telebot import TeleBot, types
from dotenv import load_dotenv
from utils.database import (
    create_tables, add_user, delete_user_progress, get_question, check_answer,
    complete_question, add_user_progress, get_completed_questions, get_all_questions,
    get_my_info, add_to_top, get_top, delete_question, add_question, calculate_total_time, get_all_users
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="[%(levelname)s](%(asctime)s) - %(message)s",
    datefmt="%Y.%m.%d %H:%M:%S",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)

admin_state = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_API")
ADMIN_IDS = [int(id.strip()) for id in os.getenv("ADMIN", "").split(",") if id.strip()]
bot = TeleBot(BOT_TOKEN)

# –°–æ–æ–±—â–µ–Ω–∏—è
messages = {
    "start": "üöÄ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–≤–∏–∑-–±–æ—Ç!**\n\nüåå –ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ –∫–æ—Å–º–æ—Å–µ –∏ —Å—Ä–∞–∑–∏—Ç—å—Å—è –∑–∞ –º–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞.",
    "help": "üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n\n"
            "‚ñ∂Ô∏è /start\_quiz - –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É\n"
            "üìä /stats - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
            "üéÅ /get\_prize - –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ\n"
            "üë®üíª /author - –£–∑–Ω–∞—Ç—å –æ–± –∞–≤—Ç–æ—Ä–µ –±–æ—Ç–∞\n"
            "üîß /admin - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)",
    "prize_success": "üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –∫–≤–∏–∑–∞!**\n\n"
                     "üåü –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã! –ü–æ–∫–∞ —á—Ç–æ –Ω–∞–≥—Ä–∞–¥–∞ ‚Äî —ç—Ç–æ –≤–∞—à–∞ –≥–æ—Ä–¥–æ—Å—Ç—å –∏ –∑–Ω–∞–Ω–∏—è, –Ω–æ –≤ –±—É–¥—É—â–µ–º –≤–∞—Å –∂–¥—É—Ç —Å—é—Ä–ø—Ä–∏–∑—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –∑–∞–Ω—è—Ç—å –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ! üèÜ",
    "prize_failure": "‚ùå **–ù–µ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã!**\n\n"
                     "üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {}/{}\n"
                     "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É! üí™",
    "no_questions": "‚ùå **–í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!**\n\n"
                    "‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∑–∞ –ø–æ–º–æ—â—å—é. –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ /author.",
    "author": "üë®üíª **–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞:**\n\n"
              "‚Ä¢ **–§–ò–û:** –ì–æ—Ä—à–∫–æ–≤ –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –ê–ª–µ–∫—Å–µ–µ–≤–∏—á\n"
              "‚Ä¢ **Telegram:** [@Kos000113](https://t.me/Kos000113)\n"
              "‚Ä¢ **GitHub:** [kostya2023](https://github.com/kostya2023)\n"
              "‚Ä¢ **–ü—Ä–æ–µ–∫—Ç:** [space_quiz_bot](https://github.com/kostya2023/telegram_space_quiz_bot)",
    "stats": "üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\n"
             "‚Ä¢ –ü—Ä–æ–π–¥–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {}\n"
             "‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è: {}\n"
             "‚Ä¢ –ú–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ: {}",
    "correct_answer": "‚úÖ **–ü—Ä–∞–≤–∏–ª—å–Ω–æ!**\n\n"
                      "üéâ –í—ã —Å–ø—Ä–∞–≤–∏–ª–∏—Å—å! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É!",
    "incorrect_answer": "‚ùå **–ù–µ–≤–µ—Ä–Ω–æ!**\n\n"
                        "üòî –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É.",
    "quiz_completed": "üéâ **–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!**\n\n"
                      "‚è±Ô∏è –í–∞—à–µ –≤—Ä–µ–º—è: {} —Å–µ–∫—É–Ω–¥\n"
                      "üèÜ –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–æ–ø!",
    "admin": {
        "access_denied": "‚õî **–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!**\n\n"
                         "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.",
        "panel": "üîß **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:**\n\n"
                 "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        "questions_list": "üìö **–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤:**\n\n",
        "users_list": "üë• **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n\n",
        "top_users": "üèÜ **–¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n\n",
        "question_deleted": "üóëÔ∏è **–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!**",
        "question_added": "üìù **–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!**",
        "error": "‚ùå **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!**\n\n"
                 "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.",
        "invalid_format": "‚ö†Ô∏è **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!**\n\n"
                          "–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:\n"
                          "`–í–æ–ø—Ä–æ—Å; –≤–∞—Ä–∏–∞–Ω—Ç1; –≤–∞—Ä–∏–∞–Ω—Ç2; –≤–∞—Ä–∏–∞–Ω—Ç3; –≤–∞—Ä–∏–∞–Ω—Ç4; –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π_–æ—Ç–≤–µ—Ç`",
        "add_question_instruction": "üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:**\n\n"
                                    "–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                                    "`–í–æ–ø—Ä–æ—Å; –≤–∞—Ä–∏–∞–Ω—Ç1; –≤–∞—Ä–∏–∞–Ω—Ç2; –≤–∞—Ä–∏–∞–Ω—Ç3; –≤–∞—Ä–∏–∞–Ω—Ç4; –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π_–æ—Ç–≤–µ—Ç`"
    }
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_attempts = {}  # –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_start_time = {}  # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–≤–∏–∑–∞

def log_action(action: str, user_id: int, details: str = ""):
    logging.info(f"ACTION: {action} | USER_ID: {user_id} | DETAILS: {details}")

def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

def format_time(seconds: int) -> str:
    minutes = seconds // 60
    seconds = seconds % 60
    return f"{minutes} –º–∏–Ω {seconds} —Å–µ–∫"

def send_question(chat_id, question, question_id, user_id, message_id=None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤.
    """
    keyboard = types.InlineKeyboardMarkup()
    for idx, option in enumerate(question["options"]):
        keyboard.add(types.InlineKeyboardButton(option, callback_data=f"answer_{question_id}_{idx + 1}"))
    keyboard.add(types.InlineKeyboardButton("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞", callback_data=f"hint_{question_id}"))

    image_path = question.get("image_path")
    if not image_path or not os.path.exists(image_path):
        image_path = "imgs/photo_not_found.jpg"

    if message_id:
        try:
            bot.delete_message(chat_id, message_id)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    question_text = f"‚ùì –í–æ–ø—Ä–æ—Å {question_id}: {question['question_text']}"

    with open(image_path, "rb") as photo:
        bot.send_photo(chat_id, photo, caption=question_text, reply_markup=keyboard, parse_mode="Markdown")

@bot.message_handler(commands=["start"])
def send_welcome(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    """
    log_action("start", message.from_user.id)
    bot.send_message(message.chat.id, messages["start"], parse_mode="Markdown", reply_markup=types.ReplyKeyboardRemove())

@bot.message_handler(commands=["help"])
def show_help(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help.
    """
    log_action("help", message.from_user.id)
    bot.send_message(message.chat.id, messages["help"], parse_mode="Markdown")

@bot.message_handler(commands=["get_prize"])
def prize(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /get_prize.
    """
    user_id = message.from_user.id
    completed = get_completed_questions(user_id)
    total_questions = len(get_all_questions())
    
    if len(completed) == total_questions and total_questions > 0:
        bot.send_message(message.chat.id, messages["prize_success"], parse_mode="Markdown")
    else:
        bot.send_message(message.chat.id, messages["prize_failure"].format(len(completed), total_questions), parse_mode="Markdown")

@bot.message_handler(commands=["start_quiz"])
def start_quiz(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start_quiz.
    """
    user_id = message.from_user.id
    log_action("start_quiz", user_id)
    
    delete_user_progress(user_id)
    add_user(user_id, message.from_user.username)
    
    question = get_question(1)
    if not question:
        bot.send_message(message.chat.id, messages["no_questions"], parse_mode="Markdown")
        return

    user_start_time[user_id] = int(time.time())
    add_user_progress(user_id, 1, start_time=user_start_time[user_id])
    send_question(message.chat.id, question, 1, user_id)

@bot.message_handler(commands=["author"])
def author(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /author.
    """
    bot.send_message(
        message.chat.id,
        messages["author"],
        parse_mode="Markdown",
        disable_web_page_preview=True
    )

@bot.message_handler(commands=["stats"])
def show_stats(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats.
    """
    user_id = message.from_user.id
    stats = get_my_info(user_id)
    completed = get_completed_questions(user_id)
    
    total_time = stats["total_time"]
    formatted_time = format_time(total_time) if total_time != "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö" else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    
    bot.send_message(message.chat.id, messages["stats"].format(
        len(completed),
        formatted_time,
        stats["place"] if stats["place"] != "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö" else "üö´"
    ), parse_mode="Markdown")

def generate_admin_menu():
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        types.InlineKeyboardButton("üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞–º–∏", callback_data="admin_questions"),
        types.InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users"),
        types.InlineKeyboardButton("üìä –¢–æ–ø-10", callback_data="admin_stats"),
        types.InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="admin_close")
    )
    return keyboard

@bot.message_handler(commands=["admin"])
def admin_panel(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin.
    """
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, messages["admin"]["access_denied"], parse_mode="Markdown")
        return

    log_action("admin", message.from_user.id)
    bot.send_message(
        message.chat.id,
        messages["admin"]["panel"],
        parse_mode="Markdown",
        reply_markup=generate_admin_menu()
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("admin_"))
def handle_admin_actions(call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    user_id = call.from_user.id
    if not is_admin(user_id):
        bot.answer_callback_query(call.id, messages["admin"]["access_denied"])
        return

    action = call.data.split("_")[1]
    
    if action == "questions":
        questions = get_all_questions()
        keyboard = types.InlineKeyboardMarkup()
        for q in questions:
            keyboard.add(types.InlineKeyboardButton(
                f"‚ùå –í–æ–ø—Ä–æ—Å {q['question_id']}: {q['question_text'][:20]}...",
                callback_data=f"delete_question_{q['question_id']}"
            ))
        keyboard.add(
            types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="add_question"),
            types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back")
        )
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=messages["admin"]["questions_list"],
            reply_markup=keyboard
        )
    
    elif action == "users":
        users = get_all_users()
        keyboard = types.InlineKeyboardMarkup()
        for user in users:
            keyboard.add(types.InlineKeyboardButton(
                f"üë§ {user['username']} (ID: {user['tg_id']})",
                callback_data=f"user_detail_{user['tg_id']}"
            ))
        keyboard.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back"))
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=messages["admin"]["users_list"],
            reply_markup=keyboard
        )
    
    elif action == "stats":
        top = get_top()
        text = messages["admin"]["top_users"]
        for place, data in top.items():
            text += f"{place}. {data['Name_user']} ‚Äî {data['total_time']} —Å–µ–∫\n"
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back"))
        )
    
    elif action == "back":
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=messages["admin"]["panel"],
            reply_markup=generate_admin_menu()
        )
    
    elif action == "close":
        bot.delete_message(call.message.chat.id, call.message.message_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_question_"))
def delete_question_callback(call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞.
    """
    question_id = int(call.data.split("_")[2])
    if delete_question(question_id):
        bot.answer_callback_query(call.id, messages["admin"]["question_deleted"])
        handle_admin_actions(call)
    else:
        bot.answer_callback_query(call.id, messages["admin"]["error"])

@bot.callback_query_handler(func=lambda call: call.data == "add_question")
def ask_new_question(call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.
    """
    admin_state[call.from_user.id] = "waiting_question"
    bot.send_message(
        call.message.chat.id,
        messages["admin"]["add_question_instruction"]
    )

@bot.message_handler(func=lambda m: admin_state.get(m.from_user.id) == "waiting_question")
def add_new_question(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.
    """
    try:
        data = message.text.split(";")
        if len(data) != 6:
            raise ValueError(messages["admin"]["invalid_format"])
        
        add_question(
            data[0].strip(),
            data[1].strip(),
            data[2].strip(),
            data[3].strip(),
            data[4].strip(),
            int(data[5].strip())
        )
        bot.send_message(message.chat.id, messages["admin"]["question_added"])
        admin_state[message.from_user.id] = None
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("answer_"))
def handle_answer(call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å.
    """
    user_id = call.from_user.id
    _, current_q_id, selected_opt = call.data.split("_")
    current_q_id = int(current_q_id)
    selected_opt = int(selected_opt)

    is_correct = check_answer(current_q_id, selected_opt)

    if is_correct:
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
        complete_question(user_id, current_q_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        question = get_question(current_q_id)
        correct_answer_description = question.get("description", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
        bot.answer_callback_query(call.id, f"‚úÖ –í–µ—Ä–Ω–æ!\n\n{correct_answer_description}", show_alert=True)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        next_q = get_question(current_q_id + 1)
        
        if next_q:
            # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
            bot.delete_message(call.message.chat.id, call.message.message_id)
            send_question(
                call.message.chat.id,
                next_q,
                current_q_id + 1,
                user_id
            )
            add_user_progress(user_id, current_q_id + 1, start_time=user_start_time[user_id])
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å, –∑–∞–≤–µ—Ä—à–∞–µ–º –∫–≤–∏–∑
            total_time = calculate_total_time(user_id)
            if total_time is not None:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±–Ω–æ–≤–∏–ª–æ—Å—å –ª–∏ –≤—Ä–µ–º—è –≤ —Ç–æ–ø–µ
                if add_to_top(user_id, call.from_user.username, total_time):
                    bot.send_message(
                        call.message.chat.id,
                        messages["quiz_completed"].format(total_time),
                        parse_mode="Markdown"
                    )
                else:
                    bot.send_message(
                        call.message.chat.id,
                        "üéâ –ö–≤–∏–∑ –ø—Ä–æ–π–¥–µ–Ω! –£ –≤–∞—Å –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ª—É—á—à–µ, —Ç–∞–∫ —á—Ç–æ –≤—Ä–µ–º—è –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.",
                        parse_mode="Markdown"
                    )
    else:
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ!", show_alert=True)
        

@bot.callback_query_handler(func=lambda call: call.data.startswith("hint_"))
def show_hint(call):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏.
    """
    nahui, question_id = call.data.split("_")
    question_id = int(question_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏ –ø–æ–¥—Å–∫–∞–∑–∫—É
    question = get_question(question_id)
    hint = question.get("hint", "–ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –∫–∞–∫ alert
    bot.answer_callback_query(call.id, f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:\n\n{hint}", show_alert=True)

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω—ã
    create_tables()
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    
    # –ó–∞–ø—É—Å–∫ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–ø—Ä–æ—Å–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram
    bot.infinity_polling()